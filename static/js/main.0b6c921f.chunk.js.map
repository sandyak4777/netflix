{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","table","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","NavBar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0b6c921f.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\n//instance.get(\"fool-bar\")//=https://api.themoviedb.org/3/fool-bar\r\nexport default instance","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\n// import requests from \"./requests\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  //a snippet code which runs based on specific condition\r\n  //if [],run once row loads, and do not run again\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request);\r\n      console.table(request);\r\n      console.log(request.data.results);\r\n      console.table(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          console.log(url);\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          console.log(urlParams);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(console.error));\r\n    }\r\n  };\r\n\r\n  console.log(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {/* title */}\r\n\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row_posters\">\r\n        {/* bunch of images */}\r\n\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","const API_KEY = \"5b55c06d863dbede91e4bf0dd1264b6c\";\r\n\r\n// 19f84e11932abbc79e6d83f82d6d1045\r\n//mine// 5b55c06d863dbede91e4bf0dd1264b6c\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length) //grabbing random number from 0 to 20\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n        )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">play</button>\r\n          <button className=\"banner_button\">list</button>\r\n        </div>\r\n\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      {/* title */}\r\n      {/* div 2 buttons */}\r\n      {/* description */}\r\n      <div className=\"banner-fadeBottom\"></div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://lh3.googleusercontent.com/proxy/01nlN_vsZqfmBZyNPgOasYD9oNiHpLRiBj2KlQWMIVJZrpwyU1BjnNyJoxwQ8zOY0QtfcbhQXeuAFuL2CWkykBlEdCPQJ8HbQFvWMJwHUr2XOiK7di8\"\r\n        alt=\"netflix-logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://www.iconfinder.com/data/icons/communication-355/32/communication3-15-512.png\"\r\n        alt=\"netflixlogo\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport \"./Row.css\";\nimport { Slide } from \"react-slideshow-image\";\nimport \"react-slideshow-image/dist/styles.css\";\nimport Banner from \"./Banner\";\nimport NavBar from \"./NavBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* nav bar */}\n      {/* banner */}\n      <NavBar />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"TRENDING NOW\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"TOP RATED\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"ACTION MOVIE\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"COMEDY MOVIE\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"ROMANCE MOVIE\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"HORROR MOVIE\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"DOCUMENTRIES\" fetchUrl={requests.fetchDocumentries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}